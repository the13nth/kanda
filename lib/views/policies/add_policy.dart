import 'package:flutter/material.dart';
import '../../constants/colors.dart';
import '../../models/policy.dart';
import '../../models/vehicle.dart';
import '../../services/policy_service.dart';
import '../../services/vehicle_service.dart';
import '../../services/auth_service.dart';
import '../../widgets/customtextfield.dart';
import '../../widgets/custombtn.dart';
import '../../widgets/detailstext1.dart';

class AddPolicyPage extends StatefulWidget {
  const AddPolicyPage({super.key});

  @override
  State<AddPolicyPage> createState() => _AddPolicyPageState();
}

class _AddPolicyPageState extends State<AddPolicyPage> {
  final _formKey = GlobalKey<FormState>();
  final _descriptionController = TextEditingController();

  String _selectedPolicyType = 'comprehensive';
  String _selectedCoverageLevel = 'standard';
  String _selectedRiskLevel = 'moderate';
  String? _selectedVehicleId;
  DateTime _startDate = DateTime.now();
  DateTime _endDate = DateTime.now().add(const Duration(days: 365));
  double _monthlyPremium = 0.0;
  double _annualPremium = 0.0;
  final double _discount = 0.0;
  final String _discountReason = '';
  bool _isLoading = false;

  List<Vehicle> _vehicles = [];
  final List<String> _policyTypes = [
    'comprehensive',
    'third_party',
    'collision',
  ];
  final List<String> _coverageLevels = ['basic', 'standard', 'premium'];
  final List<String> _riskLevels = ['low', 'moderate', 'high'];

  @override
  void initState() {
    super.initState();
    _loadVehicles();
    _calculatePremium();
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _loadVehicles() async {
    try {
      final vehicles = await VehicleService.getUserVehicles();
      setState(() {
        _vehicles = vehicles;
        if (vehicles.isNotEmpty) {
          _selectedVehicleId = vehicles.first.id;
        }
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error loading vehicles: $e')));
      }
    }
  }

  void _calculatePremium() {
    double basePremium = 0.0;

    // Base premium by policy type
    switch (_selectedPolicyType) {
      case 'comprehensive':
        basePremium = 150.0;
        break;
      case 'third_party':
        basePremium = 80.0;
        break;
      case 'collision':
        basePremium = 120.0;
        break;
    }

    // Coverage level multiplier
    switch (_selectedCoverageLevel) {
      case 'basic':
        basePremium *= 0.8;
        break;
      case 'standard':
        basePremium *= 1.0;
        break;
      case 'premium':
        basePremium *= 1.3;
        break;
    }

    // Risk level multiplier
    switch (_selectedRiskLevel) {
      case 'low':
        basePremium *= 0.7;
        break;
      case 'moderate':
        basePremium *= 1.0;
        break;
      case 'high':
        basePremium *= 1.5;
        break;
    }

    setState(() {
      _monthlyPremium = basePremium;
      _annualPremium = basePremium * 12;
    });
  }

  Future<void> _selectStartDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _startDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 30)),
    );
    if (picked != null && picked != _startDate) {
      setState(() {
        _startDate = picked;
        _endDate = picked.add(const Duration(days: 365));
      });
    }
  }

  Future<void> _savePolicy() async {
    if (!_formKey.currentState!.validate()) return;
    if (_selectedVehicleId == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Please select a vehicle')));
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final policy = Policy(
        id: '', // Will be generated by Supabase
        userId: AuthService.currentUser?.id ?? '',
        vehicleId: _selectedVehicleId!,
        policyNumber: '', // Will be generated by Supabase
        policyType: _selectedPolicyType,
        coverageLevel: _selectedCoverageLevel,
        monthlyPremium: _monthlyPremium,
        annualPremium: _annualPremium,
        riskLevel: _selectedRiskLevel,
        status: 'pending',
        startDate: _startDate,
        endDate: _endDate,
        description: _descriptionController.text.trim(),
        coverageDetails: {
          'policy_type': _selectedPolicyType,
          'coverage_level': _selectedCoverageLevel,
          'risk_level': _selectedRiskLevel,
        },
        discount: _discount > 0 ? _discount : null,
        discountReason: _discount > 0 ? _discountReason : null,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await PolicyService.addPolicy(policy);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Policy created successfully!')),
        );
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error creating policy: $e')));
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.bgColor,
      appBar: AppBar(
        title: const Text('Create Policy'),
        backgroundColor: AppColors.bgColor,
        foregroundColor: Colors.black,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Vehicle Selection
              const Text1(text1: 'Select Vehicle', size: 18),
              const SizedBox(height: 15),
              if (_vehicles.isEmpty)
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade50,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.orange.shade200),
                  ),
                  child: Column(
                    children: [
                      const Icon(Icons.warning, color: Colors.orange, size: 40),
                      const SizedBox(height: 10),
                      const Text(
                        'No vehicles found. Please add a vehicle first.',
                        style: TextStyle(fontSize: 16),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 15),
                      ElevatedButton(
                        onPressed: () {
                          Navigator.pushNamed(context, '/add-vehicle');
                        },
                        child: const Text('Add Vehicle'),
                      ),
                    ],
                  ),
                )
              else
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 20,
                    vertical: 15,
                  ),
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: AppColors.textFormFieldBorderColor,
                    ),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      value: _selectedVehicleId,
                      isExpanded: true,
                      items: _vehicles.map((Vehicle vehicle) {
                        return DropdownMenuItem<String>(
                          value: vehicle.id,
                          child: Text(
                            '${vehicle.year} ${vehicle.make} ${vehicle.model} - ${vehicle.licensePlate}',
                          ),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        if (newValue != null) {
                          setState(() {
                            _selectedVehicleId = newValue;
                          });
                        }
                      },
                    ),
                  ),
                ),
              const SizedBox(height: 30),

              // Policy Type Selection
              const Text1(text1: 'Policy Type', size: 18),
              const SizedBox(height: 15),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 15,
                ),
                decoration: BoxDecoration(
                  border: Border.all(color: AppColors.textFormFieldBorderColor),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _selectedPolicyType,
                    isExpanded: true,
                    items: _policyTypes.map((String type) {
                      return DropdownMenuItem<String>(
                        value: type,
                        child: Text(type.replaceAll('_', ' ').toUpperCase()),
                      );
                    }).toList(),
                    onChanged: (String? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _selectedPolicyType = newValue;
                          _calculatePremium();
                        });
                      }
                    },
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Coverage Level Selection
              const Text1(text1: 'Coverage Level', size: 18),
              const SizedBox(height: 15),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 15,
                ),
                decoration: BoxDecoration(
                  border: Border.all(color: AppColors.textFormFieldBorderColor),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _selectedCoverageLevel,
                    isExpanded: true,
                    items: _coverageLevels.map((String level) {
                      return DropdownMenuItem<String>(
                        value: level,
                        child: Text(level.toUpperCase()),
                      );
                    }).toList(),
                    onChanged: (String? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _selectedCoverageLevel = newValue;
                          _calculatePremium();
                        });
                      }
                    },
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Risk Level Selection
              const Text1(text1: 'Risk Level', size: 18),
              const SizedBox(height: 15),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 15,
                ),
                decoration: BoxDecoration(
                  border: Border.all(color: AppColors.textFormFieldBorderColor),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _selectedRiskLevel,
                    isExpanded: true,
                    items: _riskLevels.map((String level) {
                      return DropdownMenuItem<String>(
                        value: level,
                        child: Text(level.toUpperCase()),
                      );
                    }).toList(),
                    onChanged: (String? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _selectedRiskLevel = newValue;
                          _calculatePremium();
                        });
                      }
                    },
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Start Date Selection
              const Text1(text1: 'Policy Start Date', size: 18),
              const SizedBox(height: 15),
              GestureDetector(
                onTap: _selectStartDate,
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 20,
                    vertical: 15,
                  ),
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: AppColors.textFormFieldBorderColor,
                    ),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      const Icon(Icons.calendar_today, color: Colors.black54),
                      const SizedBox(width: 15),
                      Text(
                        '${_startDate.day}/${_startDate.month}/${_startDate.year}',
                        style: const TextStyle(fontSize: 16),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Premium Display
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: AppColors.buttonColor.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: AppColors.buttonColor),
                ),
                child: Column(
                  children: [
                    const Text1(text1: 'Premium Calculation', size: 18),
                    const SizedBox(height: 15),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text('Monthly Premium:'),
                        Text(
                          '\$${_monthlyPremium.toStringAsFixed(2)}',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: AppColors.buttonColor,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text('Annual Premium:'),
                        Text(
                          '\$${_annualPremium.toStringAsFixed(2)}',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: AppColors.buttonColor,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 20),

              // Description
              CustomTextField(
                label: 'Policy Description (Optional)',
                icon: Icons.description,
                controller: _descriptionController,
                keyboardType: TextInputType.multiline,
              ),
              const SizedBox(height: 40),

              // Save Button
              CustomButton(
                text: _isLoading ? 'Creating Policy...' : 'Create Policy',
                onTap: _isLoading ? null : _savePolicy,
              ),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }
}
