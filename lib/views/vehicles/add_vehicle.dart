import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import '../../constants/colors.dart';
import '../../models/vehicle.dart';
import '../../services/vehicle_service.dart';
import '../../services/auth_service.dart';
import '../../widgets/customtextfield.dart';
import '../../widgets/custombtn.dart';
import '../../widgets/detailstext1.dart';

class AddVehiclePage extends StatefulWidget {
  const AddVehiclePage({super.key});

  @override
  State<AddVehiclePage> createState() => _AddVehiclePageState();
}

class _AddVehiclePageState extends State<AddVehiclePage> {
  final _formKey = GlobalKey<FormState>();
  final _makeController = TextEditingController();
  final _modelController = TextEditingController();
  final _yearController = TextEditingController();
  final _colorController = TextEditingController();
  final _licensePlateController = TextEditingController();
  final _vinController = TextEditingController();
  final _engineTypeController = TextEditingController();
  final _mileageController = TextEditingController();

  String _selectedUsage = 'personal';
  String? _vehicleImageUrl;
  bool _isLoading = false;

  final List<String> _usageOptions = ['personal', 'commercial', 'ride_share'];

  @override
  void dispose() {
    _makeController.dispose();
    _modelController.dispose();
    _yearController.dispose();
    _colorController.dispose();
    _licensePlateController.dispose();
    _vinController.dispose();
    _engineTypeController.dispose();
    _mileageController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);

    if (image != null) {
      setState(() {
        _vehicleImageUrl = image.path;
      });
    }
  }

  Future<void> _saveVehicle() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final vehicle = Vehicle(
        id: '', // Will be generated by Supabase
        userId: AuthService.currentUser?.id ?? '',
        make: _makeController.text.trim(),
        model: _modelController.text.trim(),
        year: int.parse(_yearController.text.trim()),
        color: _colorController.text.trim(),
        licensePlate: _licensePlateController.text.trim(),
        vin: _vinController.text.trim(),
        engineType: _engineTypeController.text.trim(),
        mileage: int.parse(_mileageController.text.trim()),
        usage: _selectedUsage,
        imageUrl: _vehicleImageUrl,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await VehicleService.addVehicle(vehicle);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Vehicle added successfully!')),
        );
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error adding vehicle: $e')));
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.bgColor,
      appBar: AppBar(
        title: const Text('Add Vehicle'),
        backgroundColor: AppColors.bgColor,
        foregroundColor: Colors.black,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Vehicle Image Section
              Center(
                child: Column(
                  children: [
                    GestureDetector(
                      onTap: _pickImage,
                      child: Container(
                        width: 120,
                        height: 120,
                        decoration: BoxDecoration(
                          color: AppColors.buttonColor,
                          borderRadius: BorderRadius.circular(60),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: _vehicleImageUrl != null
                            ? ClipRRect(
                                borderRadius: BorderRadius.circular(60),
                                child: Image.file(
                                  File(_vehicleImageUrl!),
                                  fit: BoxFit.cover,
                                ),
                              )
                            : const Icon(
                                Icons.directions_car,
                                size: 60,
                                color: Colors.white,
                              ),
                      ),
                    ),
                    const SizedBox(height: 10),
                    TextButton(
                      onPressed: _pickImage,
                      child: const Text('Add Vehicle Photo'),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 30),

              // Vehicle Information Section
              const Text1(text1: 'Vehicle Information', size: 18),
              const SizedBox(height: 15),

              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      label: 'Make',
                      icon: Icons.directions_car,
                      controller: _makeController,
                      keyboardType: TextInputType.text,
                    ),
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: CustomTextField(
                      label: 'Model',
                      icon: Icons.car_rental,
                      controller: _modelController,
                      keyboardType: TextInputType.text,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 15),

              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      label: 'Year',
                      icon: Icons.calendar_today,
                      controller: _yearController,
                      keyboardType: TextInputType.number,
                    ),
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: CustomTextField(
                      label: 'Color',
                      icon: Icons.palette,
                      controller: _colorController,
                      keyboardType: TextInputType.text,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 15),

              CustomTextField(
                label: 'License Plate',
                icon: Icons.credit_card,
                controller: _licensePlateController,
                keyboardType: TextInputType.text,
              ),
              const SizedBox(height: 15),

              CustomTextField(
                label: 'VIN (Vehicle Identification Number)',
                icon: Icons.fingerprint,
                controller: _vinController,
                keyboardType: TextInputType.text,
              ),
              const SizedBox(height: 15),

              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      label: 'Engine Type',
                      icon: Icons.settings,
                      controller: _engineTypeController,
                      keyboardType: TextInputType.text,
                    ),
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: CustomTextField(
                      label: 'Mileage',
                      icon: Icons.speed,
                      controller: _mileageController,
                      keyboardType: TextInputType.number,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 15),

              // Usage Type Dropdown
              const Text1(text1: 'Vehicle Usage', size: 16),
              const SizedBox(height: 10),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 15,
                ),
                decoration: BoxDecoration(
                  border: Border.all(color: AppColors.textFormFieldBorderColor),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _selectedUsage,
                    isExpanded: true,
                    items: _usageOptions.map((String usage) {
                      return DropdownMenuItem<String>(
                        value: usage,
                        child: Text(usage.replaceAll('_', ' ').toUpperCase()),
                      );
                    }).toList(),
                    onChanged: (String? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _selectedUsage = newValue;
                        });
                      }
                    },
                  ),
                ),
              ),
              const SizedBox(height: 40),

              // Save Button
              CustomButton(
                text: _isLoading ? 'Adding Vehicle...' : 'Add Vehicle',
                onTap: _isLoading ? null : _saveVehicle,
              ),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }
}
