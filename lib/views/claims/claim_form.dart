import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import '../../constants/colors.dart';
import '../../models/claim.dart';
import '../../models/policy.dart';
import '../../services/claim_service.dart';
import '../../services/policy_service.dart';
import '../../services/auth_service.dart';
import '../../widgets/customtextfield.dart';
import '../../widgets/custombtn.dart';
import '../../widgets/detailstext1.dart';

class ClaimFormPage extends StatefulWidget {
  const ClaimFormPage({super.key});

  @override
  State<ClaimFormPage> createState() => _ClaimFormPageState();
}

class _ClaimFormPageState extends State<ClaimFormPage> {
  final _formKey = GlobalKey<FormState>();
  final _descriptionController = TextEditingController();
  final _estimatedAmountController = TextEditingController();
  final _notesController = TextEditingController();

  String _selectedClaimType = 'accident';
  String? _selectedPolicyId;
  DateTime _selectedDate = DateTime.now();
  final List<String> _attachments = [];
  bool _isLoading = false;
  bool _isSubmitting = false;

  List<Policy> _policies = [];
  final List<String> _claimTypes = ['accident', 'theft', 'damage', 'other'];

  @override
  void initState() {
    super.initState();
    _loadPolicies();
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    _estimatedAmountController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _loadPolicies() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final policies = await PolicyService.getUserPolicies();
      setState(() {
        _policies = policies;
        if (policies.isNotEmpty) {
          _selectedPolicyId = policies.first.id;
        }
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error loading policies: $e')));
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now(),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  Future<void> _pickImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);

    if (image != null) {
      setState(() {
        _attachments.add(image.path);
      });
    }
  }

  Future<void> _submitClaim() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isSubmitting = true;
    });

    try {
      final claim = Claim(
        id: '', // Will be generated by Supabase
        userId: AuthService.currentUser?.id ?? '',
        policyId: _selectedPolicyId,
        claimNumber:
            'CLM-${DateTime.now().millisecondsSinceEpoch}', // Generate claim number
        claimType: _selectedClaimType,
        status: 'submitted',
        incidentDate: _selectedDate.toIso8601String().split('T')[0],
        description: _descriptionController.text.trim(),
        claimAmount: _estimatedAmountController.text.isNotEmpty
            ? double.tryParse(_estimatedAmountController.text.trim())
            : null,
        documentsUrls: _attachments.isNotEmpty ? _attachments : null,
        adjusterNotes: _notesController.text.trim().isNotEmpty
            ? _notesController.text.trim()
            : null,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await ClaimService.addClaim(claim);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Claim submitted successfully!')),
        );
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error submitting claim: $e')));
      }
    } finally {
      setState(() {
        _isSubmitting = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.bgColor,
      appBar: AppBar(
        title: const Text('Submit Claim'),
        backgroundColor: AppColors.bgColor,
        foregroundColor: Colors.black,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(20),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text1(text1: 'Claim Information', size: 18),
                    const SizedBox(height: 20),

                    // Claim Type Selection
                    const Text1(text1: 'Claim Type', size: 16),
                    const SizedBox(height: 10),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 15,
                      ),
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: AppColors.textFormFieldBorderColor,
                        ),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: DropdownButtonHideUnderline(
                        child: DropdownButton<String>(
                          value: _selectedClaimType,
                          isExpanded: true,
                          items: _claimTypes.map((String type) {
                            return DropdownMenuItem<String>(
                              value: type,
                              child: Text(type.toUpperCase()),
                            );
                          }).toList(),
                          onChanged: (String? newValue) {
                            if (newValue != null) {
                              setState(() {
                                _selectedClaimType = newValue;
                              });
                            }
                          },
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),

                    // Policy Selection
                    const Text1(text1: 'Related Policy (Optional)', size: 16),
                    const SizedBox(height: 10),
                    if (_policies.isEmpty)
                      Container(
                        padding: const EdgeInsets.all(15),
                        decoration: BoxDecoration(
                          color: Colors.orange.shade50,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.orange.shade200),
                        ),
                        child: const Text(
                          'No policies found. You can still submit a claim without selecting a policy.',
                          style: TextStyle(fontSize: 14),
                        ),
                      )
                    else
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 15,
                        ),
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: AppColors.textFormFieldBorderColor,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton<String>(
                            value: _selectedPolicyId,
                            isExpanded: true,
                            items: _policies.map((Policy policy) {
                              return DropdownMenuItem<String>(
                                value: policy.id,
                                child: Text(
                                  '${policy.policyType.toUpperCase()} - ${policy.policyNumber}',
                                ),
                              );
                            }).toList(),
                            onChanged: (String? newValue) {
                              if (newValue != null) {
                                setState(() {
                                  _selectedPolicyId = newValue;
                                });
                              }
                            },
                          ),
                        ),
                      ),
                    const SizedBox(height: 20),

                    // Incident Date
                    const Text1(text1: 'Incident Date', size: 16),
                    const SizedBox(height: 10),
                    GestureDetector(
                      onTap: _selectDate,
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 15,
                        ),
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: AppColors.textFormFieldBorderColor,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          children: [
                            const Icon(
                              Icons.calendar_today,
                              color: Colors.black54,
                            ),
                            const SizedBox(width: 15),
                            Text(
                              '${_selectedDate.day}/${_selectedDate.month}/${_selectedDate.year}',
                              style: const TextStyle(fontSize: 16),
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),

                    // Description
                    CustomTextField(
                      label: 'Description of Incident',
                      icon: Icons.description,
                      controller: _descriptionController,
                      keyboardType: TextInputType.multiline,
                    ),
                    const SizedBox(height: 20),

                    // Estimated Amount
                    CustomTextField(
                      label: 'Claim Amount (Optional)',
                      icon: Icons.attach_money,
                      controller: _estimatedAmountController,
                      keyboardType: TextInputType.number,
                    ),
                    const SizedBox(height: 20),

                    // Attachments
                    const Text1(text1: 'Attachments (Optional)', size: 16),
                    const SizedBox(height: 10),
                    Row(
                      children: [
                        ElevatedButton.icon(
                          onPressed: _pickImage,
                          icon: const Icon(Icons.attach_file),
                          label: const Text('Add Photo'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppColors.buttonColor,
                            foregroundColor: Colors.white,
                          ),
                        ),
                        const SizedBox(width: 10),
                        if (_attachments.isNotEmpty)
                          Text('${_attachments.length} file(s) attached'),
                      ],
                    ),
                    const SizedBox(height: 20),

                    // Notes
                    CustomTextField(
                      label: 'Adjuster Notes (Optional)',
                      icon: Icons.note,
                      controller: _notesController,
                      keyboardType: TextInputType.multiline,
                    ),
                    const SizedBox(height: 40),

                    // Submit Button
                    CustomButton(
                      text: _isSubmitting ? 'Submitting...' : 'Submit Claim',
                      onTap: _isSubmitting ? null : _submitClaim,
                    ),
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
    );
  }
}
